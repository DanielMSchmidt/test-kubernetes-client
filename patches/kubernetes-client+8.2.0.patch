diff --git a/node_modules/kubernetes-client/backends/request/client.js b/node_modules/kubernetes-client/backends/request/client.js
index 9913b01..cc08069 100644
--- a/node_modules/kubernetes-client/backends/request/client.js
+++ b/node_modules/kubernetes-client/backends/request/client.js
@@ -1,11 +1,11 @@
-'use strict'
+"use strict";
 
-const JSONStream = require('json-stream')
-const pump = require('pump')
-const qs = require('qs')
-const request = require('request')
-const urljoin = require('url-join')
-const WebSocket = require('ws')
+const JSONStream = require("json-stream");
+const pump = require("pump");
+const qs = require("qs");
+const request = require("request");
+const urljoin = require("url-join");
+const WebSocket = require("ws");
 
 /**
  * Refresh whatever authentication {type} is.
@@ -13,28 +13,24 @@ const WebSocket = require('ws')
  * @param {Object} config - auth provider config
  * @returns {Promise} with request friendly auth object
  */
-function refreshAuth (type, config) {
+function refreshAuth(type, config) {
+  console.log("refreshing auth");
   return new Promise((resolve, reject) => {
-    const provider = require(`../../lib/auth-providers/${type}.js`)
-    provider.refresh(config)
+    const provider = require(`../../lib/auth-providers/${type}.js`);
+    provider
+      .refresh(config)
       .then(result => {
         const auth = {
           bearer: result
-        }
+        };
 
-        return resolve(auth)
+        return resolve(auth);
       })
-      .catch(err => reject(err))
-  })
+      .catch(err => reject(err));
+  });
 }
 
-const execChannels = [
-  'stdin',
-  'stdout',
-  'stderr',
-  'error',
-  'resize'
-]
+const execChannels = ["stdin", "stdout", "stderr", "error", "resize"];
 
 /**
  * Determine whether a failed Kubernetes API response is asking for an upgrade
@@ -45,10 +41,12 @@ const execChannels = [
  * @returns {boolean} Upgrade the request
  */
 
-function isUpgradeRequired (body) {
-  return body.status === 'Failure' &&
+function isUpgradeRequired(body) {
+  return (
+    body.status === "Failure" &&
     body.code === 400 &&
-    body.message === 'Upgrade request required'
+    body.message === "Upgrade request required"
+  );
 }
 
 /**
@@ -57,32 +55,34 @@ function isUpgradeRequired (body) {
  * @param {callback} cb - The callback that handles the response
  */
 
-function upgradeRequest (options, cb) {
-  const queryParams = qs.stringify(options.qs, { indices: false })
-  const wsUrl = urljoin(options.baseUrl, options.uri, `?${queryParams}`)
-  const protocol = 'base64.channel.k8s.io'
-  const ws = new WebSocket(wsUrl, protocol, options)
-
-  const messages = []
-  ws.on('message', (msg) => {
-    const channel = execChannels[msg.slice(0, 1)]
-    const message = Buffer.from(msg.slice(1), 'base64').toString('ascii')
-    messages.push({ channel, message })
-  })
-
-  ws.on('error', (err) => {
-    err.messages = messages
-    cb(err, messages)
-  })
-
-  ws.on('close', (code, reason) => cb(null, {
-    messages,
-    body: messages.map(({ message }) => message).join(''),
-    code,
-    reason
-  }))
-
-  return ws
+function upgradeRequest(options, cb) {
+  const queryParams = qs.stringify(options.qs, { indices: false });
+  const wsUrl = urljoin(options.baseUrl, options.uri, `?${queryParams}`);
+  const protocol = "base64.channel.k8s.io";
+  const ws = new WebSocket(wsUrl, protocol, options);
+
+  const messages = [];
+  ws.on("message", msg => {
+    const channel = execChannels[msg.slice(0, 1)];
+    const message = Buffer.from(msg.slice(1), "base64").toString("ascii");
+    messages.push({ channel, message });
+  });
+
+  ws.on("error", err => {
+    err.messages = messages;
+    cb(err, messages);
+  });
+
+  ws.on("close", (code, reason) =>
+    cb(null, {
+      messages,
+      body: messages.map(({ message }) => message).join(""),
+      code,
+      reason
+    })
+  );
+
+  return ws;
 }
 
 class Request {
@@ -98,68 +98,70 @@ class Request {
    * @param {boolean} options.insecureSkipTlsVerify - Skip the validity check
    *   on the server's certificate.
    */
-  constructor (options) {
-    this.requestOptions = options.request || {}
-    this.requestOptions.qsStringifyOptions = { indices: false }
-    this.requestOptions.baseUrl = options.url
-    this.requestOptions.ca = options.ca
-    this.requestOptions.cert = options.cert
-    this.requestOptions.key = options.key
-    if ('insecureSkipTlsVerify' in options) {
-      this.requestOptions.strictSSL = !options.insecureSkipTlsVerify
+  constructor(options) {
+    this.requestOptions = options.request || {};
+    this.requestOptions.qsStringifyOptions = { indices: false };
+    this.requestOptions.baseUrl = options.url;
+    this.requestOptions.ca = options.ca;
+    this.requestOptions.cert = options.cert;
+    this.requestOptions.key = options.key;
+    if ("insecureSkipTlsVerify" in options) {
+      this.requestOptions.strictSSL = !options.insecureSkipTlsVerify;
     }
-    if ('timeout' in options) {
-      this.requestOptions.timeout = options.timeout
+    if ("timeout" in options) {
+      this.requestOptions.timeout = options.timeout;
     }
 
     this.authProvider = {
       type: null
-    }
+    };
     if (options.auth) {
-      this.requestOptions.auth = options.auth
+      this.requestOptions.auth = options.auth;
       if (options.auth.provider) {
-        this.requestOptions.auth = options.auth.request
-        this.authProvider = options.auth.provider
+        this.requestOptions.auth = options.auth.request;
+        this.authProvider = options.auth.provider;
       }
     }
   }
 
-  _request (options, cb) {
-    const auth = this.authProvider
+  _request(options, cb) {
+    const auth = this.authProvider;
+    console.log("requesting with", { auth, options });
     return request(options, (err, res, body) => {
-      if (err) return cb(err)
+      if (err) return cb(err);
 
       if (body && isUpgradeRequired(body)) {
-        return upgradeRequest(options, cb)
+        return upgradeRequest(options, cb);
       }
 
       // Refresh auth if 401 or 403
       if ((res.statusCode === 401 || res.statusCode === 403) && auth.type) {
+        console.log("_request refreshing auth");
         return refreshAuth(auth.type, auth.config)
           .then(newAuth => {
-            this.requestOptions.auth = newAuth
-            options.auth = newAuth
+            this.requestOptions.auth = newAuth;
+            options.auth = newAuth;
             return request(options, (err, res, body) => {
-              if (err) return cb(err)
-              return cb(null, { statusCode: res.statusCode, body })
-            })
+              if (err) return cb(err);
+              return cb(null, { statusCode: res.statusCode, body });
+            });
           })
-          .catch(err => cb(err))
+          .catch(err => cb(err));
       }
 
-      return cb(null, { statusCode: res.statusCode, body: body })
-    })
+      return cb(null, { statusCode: res.statusCode, body: body });
+    });
   }
 
-  async getLogByteStream (options) {
-    return this.http(Object.assign({ stream: true }, options))
+  async getLogByteStream(options) {
+    return this.http(Object.assign({ stream: true }, options));
   }
 
-  async getWatchObjectStream (options) {
-    const jsonStream = new JSONStream()
-    const stream = this.http(Object.assign({ stream: true }, options))
-    pump(stream, jsonStream)
-    return jsonStream
+  async getWatchObjectStream(options) {
+    const jsonStream = new JSONStream();
+    const stream = this.http(Object.assign({ stream: true }, options));
+    pump(stream, jsonStream);
+    return jsonStream;
   }
 
   /**
@@ -178,37 +180,41 @@ class Request {
    * @param {callback} cb - The callback that handles the response
    * @returns {Stream} If cb is falsy, return a stream
    */
-  http (options) {
-    const uri = options.pathname
-    const requestOptions = Object.assign({
-      method: options.method,
-      uri,
-      body: options.body,
-      json: 'json' in options ? Boolean(options.json) : true,
-      qs: options.parameters || options.qs,
-      headers: options.headers
-    }, this.requestOptions)
+  http(options) {
+    console.log("client http");
+    const uri = options.pathname;
+    const requestOptions = Object.assign(
+      {
+        method: options.method,
+        uri,
+        body: options.body,
+        json: "json" in options ? Boolean(options.json) : true,
+        qs: options.parameters || options.qs,
+        headers: options.headers
+      },
+      this.requestOptions
+    );
 
     if (options.noAuth) {
-      delete requestOptions.auth
+      delete requestOptions.auth;
     }
 
-    if (options.stream) return request(requestOptions)
+    if (options.stream) return request(requestOptions);
 
     return new Promise((resolve, reject) => {
       this._request(requestOptions, (err, res) => {
-        if (err) return reject(err)
+        if (err) return reject(err);
         if (res.statusCode < 200 || res.statusCode > 299) {
-          const error = new Error(res.body.message || res.body)
+          const error = new Error(res.body.message || res.body);
           // .code is backwards compatible with pre-5.0.0 code.
-          error.code = res.statusCode
-          error.statusCode = res.statusCode
-          return reject(error)
+          error.code = res.statusCode;
+          error.statusCode = res.statusCode;
+          return reject(error);
         }
-        resolve(res)
-      })
-    })
+        resolve(res);
+      });
+    });
   }
 }
 
-module.exports = Request
+module.exports = Request;
diff --git a/node_modules/kubernetes-client/backends/request/config.js b/node_modules/kubernetes-client/backends/request/config.js
index 0a8d135..b48e679 100644
--- a/node_modules/kubernetes-client/backends/request/config.js
+++ b/node_modules/kubernetes-client/backends/request/config.js
@@ -1,134 +1,146 @@
-'use strict'
+"use strict";
 /* eslint no-process-env: 0 no-sync:0 */
 
-const fs = require('fs')
-const path = require('path')
-const yaml = require('js-yaml')
-const merge = require('deepmerge')
+const fs = require("fs");
+const path = require("path");
+const yaml = require("js-yaml");
+const merge = require("deepmerge");
 
-const root = process.env.KUBERNETES_CLIENT_SERVICEACCOUNT_ROOT || '/var/run/secrets/kubernetes.io/serviceaccount/'
-const caPath = path.join(root, 'ca.crt')
-const tokenPath = path.join(root, 'token')
-const namespacePath = path.join(root, 'namespace')
+const root =
+  process.env.KUBERNETES_CLIENT_SERVICEACCOUNT_ROOT ||
+  "/var/run/secrets/kubernetes.io/serviceaccount/";
+const caPath = path.join(root, "ca.crt");
+const tokenPath = path.join(root, "token");
+const namespacePath = path.join(root, "namespace");
 
-function defaultConfigPaths () {
+function defaultConfigPaths() {
   if (process.env.KUBECONFIG) {
     // From https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/#set-the-kubeconfig-environment-variable
     // KUBECONFIG can support multiple config files.
-    const delimiter = process.platform === 'win32' ? ';' : ':'
-    return process.env.KUBECONFIG.split(delimiter)
+    const delimiter = process.platform === "win32" ? ";" : ":";
+    return process.env.KUBECONFIG.split(delimiter);
   }
-  const homeDir = process.env[(process.platform === 'win32') ? 'USERPROFILE' : 'HOME']
-  return [path.join(homeDir, '.kube', 'config')]
+  const homeDir =
+    process.env[process.platform === "win32" ? "USERPROFILE" : "HOME"];
+  return [path.join(homeDir, ".kube", "config")];
 }
 
 /**
-* Returns with in cluster config
-* Based on: https://github.com/kubernetes/client-go/blob/124670e99da15091e13916f0ad4b2b2df2a39cd5/rest/config.go#L274
-* and http://kubernetes.io/docs/user-guide/accessing-the-cluster/#accessing-the-api-from-a-pod
-*
-* @function getInCluster
-* @returns {Object} { url, cert, auth, namespace }
-*/
-function getInCluster () {
-  const host = process.env.KUBERNETES_SERVICE_HOST
-  const port = process.env.KUBERNETES_SERVICE_PORT
+ * Returns with in cluster config
+ * Based on: https://github.com/kubernetes/client-go/blob/124670e99da15091e13916f0ad4b2b2df2a39cd5/rest/config.go#L274
+ * and http://kubernetes.io/docs/user-guide/accessing-the-cluster/#accessing-the-api-from-a-pod
+ *
+ * @function getInCluster
+ * @returns {Object} { url, cert, auth, namespace }
+ */
+function getInCluster() {
+  const host = process.env.KUBERNETES_SERVICE_HOST;
+  const port = process.env.KUBERNETES_SERVICE_PORT;
   if (!host || !port) {
     throw new TypeError(
-      'Unable to load in-cluster configuration, KUBERNETES_SERVICE_HOST' +
-      ' and KUBERNETES_SERVICE_PORT must be defined')
+      "Unable to load in-cluster configuration, KUBERNETES_SERVICE_HOST" +
+        " and KUBERNETES_SERVICE_PORT must be defined"
+    );
   }
 
-  const ca = fs.readFileSync(caPath, 'utf8')
-  const bearer = fs.readFileSync(tokenPath, 'utf8')
-  const namespace = fs.readFileSync(namespacePath, 'utf8')
+  const ca = fs.readFileSync(caPath, "utf8");
+  const bearer = fs.readFileSync(tokenPath, "utf8");
+  const namespace = fs.readFileSync(namespacePath, "utf8");
 
   return {
     url: `https://${host}:${port}`,
     ca,
     auth: { bearer },
     namespace
-  }
+  };
 }
 
-module.exports.getInCluster = getInCluster
+module.exports.getInCluster = getInCluster;
 
 //
 // Accept a manually specified current-context to take precedence over
 // `current-context`
 //
 /* eslint-disable complexity, max-statements */
-function fromKubeconfig (kubeconfig, current) {
-  if (!kubeconfig) kubeconfig = loadKubeconfig()
+function fromKubeconfig(kubeconfig, current) {
+  if (!kubeconfig) kubeconfig = loadKubeconfig();
   // if kubeconfig is provided as a path to the yaml file,
   // or array of paths to the yaml files,
   // automatically load it.
-  if (typeof kubeconfig === 'string' || Array.isArray(kubeconfig)) {
-    kubeconfig = loadKubeconfig(kubeconfig)
+  if (typeof kubeconfig === "string" || Array.isArray(kubeconfig)) {
+    kubeconfig = loadKubeconfig(kubeconfig);
   }
 
-  current = current || kubeconfig['current-context']
-  const context = kubeconfig.contexts
-    .find(item => item.name === current).context
-  const cluster = kubeconfig.clusters
-    .find(item => item.name === context.cluster).cluster
-  const userConfig = kubeconfig.users
-    .find(user => user.name === context.user)
-  const user = userConfig ? userConfig.user : null
-  const namespace = context.namespace
-
-  let ca
-  let insecureSkipTlsVerify = false
+  current = current || kubeconfig["current-context"];
+  const context = kubeconfig.contexts.find(item => item.name === current)
+    .context;
+  const cluster = kubeconfig.clusters.find(
+    item => item.name === context.cluster
+  ).cluster;
+  const userConfig = kubeconfig.users.find(user => user.name === context.user);
+  const user = userConfig ? userConfig.user : null;
+  const namespace = context.namespace;
+
+  let ca;
+  let insecureSkipTlsVerify = false;
   if (cluster) {
-    if (cluster['certificate-authority']) {
-      ca = fs.readFileSync(path.normalize(cluster['certificate-authority']))
-    } else if (cluster['certificate-authority-data']) {
-      ca = Buffer.from(cluster['certificate-authority-data'], 'base64').toString()
+    if (cluster["certificate-authority"]) {
+      ca = fs.readFileSync(path.normalize(cluster["certificate-authority"]));
+    } else if (cluster["certificate-authority-data"]) {
+      ca = Buffer.from(
+        cluster["certificate-authority-data"],
+        "base64"
+      ).toString();
     }
 
-    if (cluster['insecure-skip-tls-verify']) {
-      insecureSkipTlsVerify = cluster['insecure-skip-tls-verify']
+    if (cluster["insecure-skip-tls-verify"]) {
+      insecureSkipTlsVerify = cluster["insecure-skip-tls-verify"];
     }
   }
 
-  let cert
-  let key
+  let cert;
+  let key;
 
-  let auth = {}
+  let auth = {};
   if (user) {
-    if (user['client-certificate']) {
-      cert = fs.readFileSync(path.normalize(user['client-certificate']))
-    } else if (user['client-certificate-data']) {
-      cert = Buffer.from(user['client-certificate-data'], 'base64').toString()
+    if (user["client-certificate"]) {
+      cert = fs.readFileSync(path.normalize(user["client-certificate"]));
+    } else if (user["client-certificate-data"]) {
+      cert = Buffer.from(user["client-certificate-data"], "base64").toString();
     }
 
-    if (user['client-key']) {
-      key = fs.readFileSync(path.normalize(user['client-key']))
-    } else if (user['client-key-data']) {
-      key = Buffer.from(user['client-key-data'], 'base64').toString()
+    if (user["client-key"]) {
+      key = fs.readFileSync(path.normalize(user["client-key"]));
+    } else if (user["client-key-data"]) {
+      key = Buffer.from(user["client-key-data"], "base64").toString();
     }
 
+    console.log("Client cert", cert);
+    console.log("Client key", key);
+
     if (user.token) {
-      auth.bearer = user.token
+      auth.bearer = user.token;
     }
 
-    if (user['auth-provider']) {
-      const config = user['auth-provider'].config
+    console.log(auth.bearer ? "token found" : "no token found");
+
+    if (user["auth-provider"]) {
+      const config = user["auth-provider"].config;
 
       // if we can't determine the type, just fail later (or don't refresh).
-      let type = null
-      let token = null
-      if (config['cmd-path']) {
-        type = 'cmd'
-        token = config['access-token']
-      } else if (config['idp-issuer-url']) {
-        type = 'openid'
-        token = config['id-token']
+      let type = null;
+      let token = null;
+      if (config["cmd-path"]) {
+        type = "cmd";
+        token = config["access-token"];
+      } else if (config["idp-issuer-url"]) {
+        type = "openid";
+        token = config["id-token"];
       }
 
       // If we have just an access-token, allow that... will expire later though.
-      if (config['access-token'] && !type) {
-        token = config['access-token']
+      if (config["access-token"] && !type) {
+        token = config["access-token"];
       }
 
       auth = {
@@ -139,35 +151,35 @@ function fromKubeconfig (kubeconfig, current) {
           config,
           type
         }
-      }
+      };
     }
 
     if (user.exec) {
-      const env = {}
+      const env = {};
       if (user.exec.env) {
         user.exec.env.forEach(variable => {
-          env[variable.name] = variable.value
-        })
+          env[variable.name] = variable.value;
+        });
       }
-      let args = ''
+      let args = "";
       if (user.exec.args) {
-        args = user.exec.args.join(' ')
+        args = user.exec.args.join(" ");
       }
       auth = {
         provider: {
-          type: 'cmd',
+          type: "cmd",
           config: {
-            'cmd-args': args,
-            'cmd-path': user.exec.command,
-            'token-key': 'status.token',
-            'cmd-env': env
+            "cmd-args": args,
+            "cmd-path": user.exec.command,
+            "token-key": "status.token",
+            "cmd-env": env
           }
         }
-      }
+      };
     }
 
-    if (user.username) auth.user = user.username
-    if (user.password) auth.pass = user.password
+    if (user.username) auth.user = user.username;
+    if (user.password) auth.pass = user.password;
   }
 
   return {
@@ -178,51 +190,66 @@ function fromKubeconfig (kubeconfig, current) {
     insecureSkipTlsVerify,
     key,
     cert
-  }
+  };
 }
 /* eslint-enable complexity, max-statements */
 
-module.exports.fromKubeconfig = fromKubeconfig
+module.exports.fromKubeconfig = fromKubeconfig;
 
-function mapCertificates (cfgPath, config) {
-  const configDir = path.dirname(cfgPath)
+function mapCertificates(cfgPath, config) {
+  const configDir = path.dirname(cfgPath);
 
   if (config.clusters) {
-    config.clusters.filter(cluster => cluster.cluster['certificate-authority']).forEach(cluster => {
-      cluster.cluster['certificate-authority'] = path.resolve(configDir, cluster.cluster['certificate-authority'])
-    })
+    config.clusters
+      .filter(cluster => cluster.cluster["certificate-authority"])
+      .forEach(cluster => {
+        cluster.cluster["certificate-authority"] = path.resolve(
+          configDir,
+          cluster.cluster["certificate-authority"]
+        );
+      });
   }
 
   if (config.users) {
-    config.users.filter(user => user.user['client-certificate']).forEach(user => {
-      user.user['client-certificate'] = path.resolve(configDir, user.user['client-certificate'])
-    })
-
-    config.users.filter(user => user.user['client-key']).forEach(user => {
-      user.user['client-key'] = path.resolve(configDir, user.user['client-key'])
-    })
+    config.users
+      .filter(user => user.user["client-certificate"])
+      .forEach(user => {
+        user.user["client-certificate"] = path.resolve(
+          configDir,
+          user.user["client-certificate"]
+        );
+      });
+
+    config.users
+      .filter(user => user.user["client-key"])
+      .forEach(user => {
+        user.user["client-key"] = path.resolve(
+          configDir,
+          user.user["client-key"]
+        );
+      });
   }
 
-  return config
+  return config;
 }
 
-function loadKubeconfig (cfgPath) {
-  let cfgPaths
+function loadKubeconfig(cfgPath) {
+  let cfgPaths;
 
   if (!cfgPath) {
-    cfgPaths = defaultConfigPaths()
+    cfgPaths = defaultConfigPaths();
   } else if (Array.isArray(cfgPath)) {
-    cfgPaths = cfgPath
+    cfgPaths = cfgPath;
   } else {
-    cfgPaths = [cfgPath]
+    cfgPaths = [cfgPath];
   }
 
   const configs = cfgPaths.map(cfgPath => {
-    const config = yaml.safeLoad(fs.readFileSync(cfgPath))
-    return mapCertificates(cfgPath, config)
-  })
+    const config = yaml.safeLoad(fs.readFileSync(cfgPath));
+    return mapCertificates(cfgPath, config);
+  });
 
-  return merge.all(configs)
+  return merge.all(configs);
 }
 
-module.exports.loadKubeconfig = loadKubeconfig
+module.exports.loadKubeconfig = loadKubeconfig;
